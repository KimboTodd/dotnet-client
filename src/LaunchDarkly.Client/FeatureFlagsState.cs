using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace LaunchDarkly.Client
{
    /// <summary>
    /// A snapshot of the state of all feature flags with regard to a specific user, generated by
    /// calling <see cref="ILdClient.AllFlagsState(User)"/>.
    /// </summary>
    public class FeatureFlagsState
    {
        private readonly bool _valid;
        private readonly IDictionary<string, JToken> _flagValues = new Dictionary<string, JToken>();
        private readonly IDictionary<string, FlagMetadata> _flagMetadata = new Dictionary<string, FlagMetadata>();
        
        /// <summary>
        /// True if this object contains a valid snapshot of feature flag state, or false if the
        /// state could not be computed(for instance, because the client was offline or there was no user).
        /// </summary>
        public bool Valid => _valid;

        internal FeatureFlagsState(bool valid)
        {
            _valid = valid;
        }

        internal void AddFlag(FeatureFlag flag, JToken value, int? variation)
        {
            _flagValues[flag.Key] = value;
            _flagMetadata[flag.Key] = new FlagMetadata
            {
                Variation = variation,
                Version = flag.Version,
                TrackEvents = flag.TrackEvents,
                DebugEventsUntilDate = flag.DebugEventsUntilDate
            };
        }

        /// <summary>
        /// Returns the value of an individual feature flag at the time the state was recorded.
        /// </summary>
        /// <param name="key">the feature flag key</param>
        /// <returns>the flag's JSON value; null if the flag returned the default value, or if
        /// there was no such flag</returns>
        public JToken GetFlagValue(string key)
        {
            if (_flagValues.TryGetValue(key, out var value))
            {
                return value;
            }
            return null;
        }

        /// <summary>
        /// Returns a dictionary of flag keys to flag values. If a flag would have evaluated to the
        /// default value, its value will be null.
        /// </summary>
        /// <returns>a dictionary of flag keys to flag values</returns>
        public IDictionary<string, JToken> ToValuesMap()
        {
            return _flagValues;
        }

        /// <summary>
        /// Returns a JSON representation of the entire state map, in the format used by the
        /// LaunchDarkly JavaScript SDK. Use this method if you are passing data to the front end that
        /// will be used to "bootstrap" the JavaScript client.
        /// </summary>
        /// <returns>a JSON representation of the state object</returns>
        public JToken ToJson()
        {
            var ret = new Dictionary<string, object>();
            foreach (var entry in _flagValues)
            {
                ret[entry.Key] = entry.Value;
            }
            ret["$flagsState"] = _flagMetadata;
            var serializer = new JsonSerializer();
            var buf = new JArray();
            var writer = new JTokenWriter(buf);
            serializer.Serialize(writer, ret);
            return buf.First;
        }
    }

    internal class FlagMetadata
    {
        [JsonProperty(PropertyName = "variation", NullValueHandling = NullValueHandling.Ignore)]
        internal int? Variation { get; set; }
        [JsonProperty(PropertyName = "version")]
        internal int Version { get; set; }
        [JsonProperty(PropertyName = "trackEvents")]
        internal bool TrackEvents { get; set; }
        [JsonProperty(PropertyName = "debugEventsUntilDate", NullValueHandling = NullValueHandling.Ignore)]
        internal long? DebugEventsUntilDate { get; set; }
    }
}
